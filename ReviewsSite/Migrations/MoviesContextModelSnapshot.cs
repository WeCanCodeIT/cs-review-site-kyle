// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewsSite.Models;

namespace ReviewsSite.Migrations
{
    [DbContext(typeof(MoviesContext))]
    partial class MoviesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReviewsSite.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("ReviewCategory");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new { Id = 1, Content = "It was an ok movie, I guess.", Date = new DateTime(2010, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), ImageUrl = "/images/spiderman.jpg", ReviewCategory = "Action", Title = "Spiderman" },
                        new { Id = 2, Content = "It was great-ish", Date = new DateTime(2009, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), ImageUrl = "/images/batman.jpg", ReviewCategory = "Action", Title = "Batman" },
                        new { Id = 3, Content = "It was a awesome!", Date = new DateTime(2008, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), ImageUrl = "/images/xmen.jpg", ReviewCategory = "Action", Title = "X-Men" }
                    );
                });

            modelBuilder.Entity("ReviewsSite.Models.ReviewTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReviewId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("TagId");

                    b.ToTable("ReviewTags");

                    b.HasData(
                        new { Id = 1, ReviewId = 1, TagId = 1 },
                        new { Id = 2, ReviewId = 1, TagId = 3 },
                        new { Id = 3, ReviewId = 2, TagId = 1 },
                        new { Id = 4, ReviewId = 2, TagId = 2 },
                        new { Id = 5, ReviewId = 3, TagId = 1 },
                        new { Id = 6, ReviewId = 3, TagId = 2 },
                        new { Id = 7, ReviewId = 3, TagId = 3 }
                    );
                });

            modelBuilder.Entity("ReviewsSite.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new { Id = 1, Text = "Action" },
                        new { Id = 2, Text = "Profanity" },
                        new { Id = 3, Text = "Kid-friendly" }
                    );
                });

            modelBuilder.Entity("ReviewsSite.Models.ReviewTag", b =>
                {
                    b.HasOne("ReviewsSite.Models.Review", "Review")
                        .WithMany("ReviewTags")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReviewsSite.Models.Tag", "Tag")
                        .WithMany("ReviewTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
